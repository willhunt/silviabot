# Generated by Django 3.0.6 on 2020-11-07 15:15

import datetime
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import silviacontrol.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('django_celery_beat', '0012_periodictask_expire_seconds'),
    ]

    operations = [
        migrations.CreateModel(
            name='ResponseModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('t', models.DateTimeField(auto_now=True)),
                ('mode', models.IntegerField(default=0)),
                ('brewing', models.BooleanField(default=False)),
                ('low_water', models.BooleanField(default=False)),
                ('temperature', models.FloatField()),
                ('temperature_setpoint', models.FloatField(blank=True, null=True)),
                ('heater_duty', models.FloatField(default=0)),
                ('heater_kp', models.FloatField(blank=True, null=True)),
                ('heater_ki', models.FloatField(blank=True, null=True)),
                ('heater_kd', models.FloatField(blank=True, null=True)),
                ('mass', models.FloatField(default=0, null=True)),
                ('mass_setpoint', models.FloatField(default=0, null=True)),
                ('pressure', models.FloatField(blank=True, null=True)),
                ('pressure_setpoint', models.FloatField(blank=True, null=True)),
                ('pump_duty', models.FloatField(default=0)),
                ('pump_kp', models.FloatField(blank=True, null=True)),
                ('pump_ki', models.FloatField(blank=True, null=True)),
                ('pump_kd', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SessionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('t_start', models.DateTimeField(default=django.utils.timezone.now)),
                ('t_end', models.DateTimeField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='SettingsModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature_setpoint', models.FloatField(default=95)),
                ('heater_kp', models.FloatField(default=0)),
                ('heater_kd', models.FloatField(default=0)),
                ('heater_ki', models.FloatField(default=0)),
                ('heater_kp_mode', models.IntegerField(default=1)),
                ('mass_setpoint', models.FloatField(default=20)),
                ('t_update', models.IntegerField(default=5)),
                ('t_sample', models.IntegerField(default=5)),
                ('t_clean_on', models.IntegerField(default=10)),
                ('t_clean_off', models.IntegerField(default=50)),
                ('n_clean_cycles', models.IntegerField(default=5)),
                ('pressure_setpoints', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(default=silviacontrol.models.get_default_pressure_profile), size=None)),
                ('pressure_t_setpoints', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(default=silviacontrol.models.get_default_time_profile), size=None)),
                ('pump_kp', models.FloatField(default=0)),
                ('pump_kd', models.FloatField(default=0)),
                ('pump_ki', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ScheduleModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='New Schedule', max_length=20)),
                ('days', models.CharField(default='0000000', max_length=7)),
                ('t_on', models.TimeField(default=datetime.time(0, 0))),
                ('t_off', models.TimeField(default=datetime.time(0, 0))),
                ('active', models.BooleanField(default=False)),
                ('schedule_off', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='schedule_off', to='django_celery_beat.PeriodicTask')),
                ('schedule_on', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='schedule_on', to='django_celery_beat.PeriodicTask')),
            ],
        ),
    ]
